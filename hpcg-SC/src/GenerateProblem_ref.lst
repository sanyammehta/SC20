%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp
Compiled : 2020-06-04  19:33:18
Compiler : Version 10.0.x.x
Ftnlx    : Version 10.0.x.x 
Target   : arm64
Command  : driver.CC -h cpu=arm-nsp1 -h network=aries -h dynamic -D __CRAYXC
           -D __CRAY_ARM_NSP1 -D __CRAY_AARCH64
           -D __CRAYXT_COMPUTE_LINUX_TARGET -I ./src -I ./src/CCE -h list=m
           -h omp -c -o src/GenerateProblem_ref.o src/GenerateProblem_ref.cpp
           -W l,-rpath=/cray/css/compiler/builds/release/cce/10.0.20200603211505
           _15e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/lib
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/craylibs
           -isystem /opt/gcc/8.1.0/snos/include/g++
           -isystem /opt/gcc/8.1.0/snos/include/g++/aarch64-unknown-linux-gnu
           -isystem /opt/gcc/8.1.0/snos/include/g++/backward
           -isystem /opt/gcc/8.1.0/snos/lib/gcc/aarch64-unknown-linux-gnu/8.1.0/
           include
           -isystem /opt/gcc/8.1.0/snos/lib/gcc/aarch64-unknown-linux-gnu/8.1.0/
           include-fixed
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/c++
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/basic
           -isystem /opt/gcc/8.1.0/snos/include
           -isystem /cray/css/pesim/armv8-sve-cross/moduledirs/aarch64-sle-sysro
           ot/12.1/usr/include
           -I /cray/css/pesim/armv8-sve-cross/moduledirs/anl-mpich/3.2.0.4/aarch
           64/gige/mpich-cray/8.6/include

clx report
------------
Source   : /cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp
Date     : 06/04/2020  19:33:21


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.                            
    2.                            //@HEADER
    3.                            // ***************************************************
    4.                            //
    5.                            // HPCG: High Performance Conjugate Gradient Benchmark
    6.                            //
    7.                            // Contact:
    8.                            // Michael A. Heroux ( maherou@sandia.gov)
    9.                            // Jack Dongarra     (dongarra@eecs.utk.edu)
   10.                            // Piotr Luszczek    (luszczek@eecs.utk.edu)
   11.                            //
   12.                            // ***************************************************
   13.                            //@HEADER
   14.                            
   15.                            /*!
   16.                             @file GenerateProblem_ref.cpp
   17.                            
   18.                             HPCG routine
   19.                             */
   20.                            
   21.                            #ifndef HPCG_NO_MPI
   22.                            #include <mpi.h>
   23.                            #endif
   24.                            
   25.                            #ifndef HPCG_NO_OPENMP
   26.                            #include <omp.h>
   27.                            #endif
   28.                            
   29.                            #if defined(HPCG_DEBUG) || defined(HPCG_DETAILED_DEBUG)
   30.                            #include <fstream>
   31.                            using std::endl;
   32.                            #include "hpcg.hpp"
   33.                            #endif
   34.                            #include <cassert>
   35.                            
   36.                            #include "GenerateProblem_ref.hpp"
   37.                            
   38.                            
   39.                            /*!
   40.                              Reference version of GenerateProblem to generate the sparse matrix, right hand side, initial guess, and exact solution.
   41.                            
   42.                              @param[in]  A      The known system matrix
   43.                              @param[inout] b      The newly allocated and generated right hand side vector (if b!=0 on entry)
   44.                              @param[inout] x      The newly allocated solution vector with entries set to 0.0 (if x!=0 on entry)
   45.                              @param[inout] xexact The newly allocated solution vector with entries set to the exact solution (if the xexact!=0 non-zero on entry)
   46.                            
   47.                              @see GenerateGeometry
   48.                            */
   49.                            
   50.                            void GenerateProblem_ref(SparseMatrix & A, Vector * b, Vector * x, Vector * xexact) {
   51.                            
   52.                              // Make local copies of geometry information.  Use global_int_t since the RHS products in the calculations
   53.                              // below may result in global range values.
   54.                              global_int_t nx = A.geom->nx;
   55.                              global_int_t ny = A.geom->ny;
   56.                              global_int_t nz = A.geom->nz;
   57.                              global_int_t gnx = A.geom->gnx;
   58.                              global_int_t gny = A.geom->gny;
   59.                              global_int_t gnz = A.geom->gnz;
   60.                              global_int_t gix0 = A.geom->gix0;
   61.                              global_int_t giy0 = A.geom->giy0;
   62.                              global_int_t giz0 = A.geom->giz0;
   63.                            
   64.                              local_int_t localNumberOfRows = nx*ny*nz; // This is the size of our subblock
   65.                              // If this assert fails, it most likely means that the local_int_t is set to int and should be set to long long
   66.                              assert(localNumberOfRows>0); // Throw an exception of the number of rows is less than zero (can happen if int overflow)
   67.                              local_int_t numberOfNonzerosPerRow = 27; // We are approximating a 27-point finite element/volume/difference 3D stencil
   68.                            
   69.                              global_int_t totalNumberOfRows = gnx*gny*gnz; // Total number of grid points in mesh
   70.                              // If this assert fails, it most likely means that the global_int_t is set to int and should be set to long long
   71.                              assert(totalNumberOfRows>0); // Throw an exception of the number of rows is less than zero (can happen if int overflow)
   72.                            
   73.                            
   74.                              // Allocate arrays that are of length localNumberOfRows
   75.    Ip                        char * nonzerosInRow = new char[localNumberOfRows];
   76.    Ip                        global_int_t ** mtxIndG = new global_int_t*[localNumberOfRows];
   77.    Ip                        local_int_t  ** mtxIndL = new local_int_t*[localNumberOfRows];
   78.    Ip                        double ** matrixValues = new double*[localNumberOfRows];
   79.    Ip                        double ** matrixDiagonal = new double*[localNumberOfRows];
   80.                            
   81.    Ip                        if (b!=0) InitializeVector(*b, localNumberOfRows);
   82.    Ip                        if (x!=0) InitializeVector(*x, localNumberOfRows);
   83.    Ip                        if (xexact!=0) InitializeVector(*xexact, localNumberOfRows);
   84.                              double * bv = 0;
   85.                              double * xv = 0;
   86.                              double * xexactv = 0;
   87.                              if (b!=0) bv = b->values; // Only compute exact solution if requested
   88.                              if (x!=0) xv = x->values; // Only compute exact solution if requested
   89.                              if (xexact!=0) xexactv = xexact->values; // Only compute exact solution if requested
   90.  +                           A.localToGlobalMap.resize(localNumberOfRows);
   91.                            
   92.                              // Use a parallel loop to do initial assignment:
   93.                              // distributes the physical placement of arrays of pointers across the memory system
   94.                            #ifndef HPCG_NO_OPENMP
   95.                              #pragma omp parallel for
   96.                            #endif
   97.  + Mmr4------------------<   for (local_int_t i=0; i< localNumberOfRows; ++i) {
   98.    Mmr4                        matrixValues[i] = 0;
   99.    Mmr4                        matrixDiagonal[i] = 0;
  100.    Mmr4                        mtxIndG[i] = 0;
  101.    Mmr4                        mtxIndL[i] = 0;
  102.    Mmr4------------------>   }
  103.                            
  104.                            #ifndef HPCG_CONTIGUOUS_ARRAYS
  105.                              // Now allocate the arrays pointed to
  106.  + 1---------------------<   for (local_int_t i=0; i< localNumberOfRows; ++i)
  107.    1 Ip------------------>     mtxIndL[i] = new local_int_t[numberOfNonzerosPerRow];
  108.  + 1---------------------<   for (local_int_t i=0; i< localNumberOfRows; ++i)
  109.    1 Ip------------------>     matrixValues[i] = new double[numberOfNonzerosPerRow];
  110.  + 1---------------------<   for (local_int_t i=0; i< localNumberOfRows; ++i)
  111.    1 Ip------------------>    mtxIndG[i] = new global_int_t[numberOfNonzerosPerRow];
  112.                            
  113.                            #else
  114.                              // Now allocate the arrays pointed to
  115.                              mtxIndL[0] = new local_int_t[localNumberOfRows * numberOfNonzerosPerRow];
  116.                              matrixValues[0] = new double[localNumberOfRows * numberOfNonzerosPerRow];
  117.                              mtxIndG[0] = new global_int_t[localNumberOfRows * numberOfNonzerosPerRow];
  118.                            
  119.                              for (local_int_t i=1; i< localNumberOfRows; ++i) {
  120.                              mtxIndL[i] = mtxIndL[0] + i * numberOfNonzerosPerRow;
  121.                              matrixValues[i] = matrixValues[0] + i * numberOfNonzerosPerRow;
  122.                              mtxIndG[i] = mtxIndG[0] + i * numberOfNonzerosPerRow;
  123.                              }
  124.                            #endif
  125.                            
  126.                              local_int_t localNumberOfNonzeros = 0;
  127.                              // TODO:  This triply nested loop could be flattened or use nested parallelism
  128.                            #ifndef HPCG_NO_OPENMP
  129.                              #pragma omp parallel for
  130.                            #endif
  131.  + Mm--------------------<   for (local_int_t iz=0; iz<nz; iz++) {
  132.    Mm                          global_int_t giz = giz0+iz;
  133.  + Mm 2------------------<     for (local_int_t iy=0; iy<ny; iy++) {
  134.    Mm 2                          global_int_t giy = giy0+iy;
  135.  + Mm 2 3----------------<       for (local_int_t ix=0; ix<nx; ix++) {
  136.    Mm 2 3                          global_int_t gix = gix0+ix;
  137.    Mm 2 3                          local_int_t currentLocalRow = iz*nx*ny+iy*nx+ix;
  138.    Mm 2 3                          global_int_t currentGlobalRow = giz*gnx*gny+giy*gnx+gix;
  139.    Mm 2 3                  #ifndef HPCG_NO_OPENMP
  140.    Mm 2 3                  // C++ std::map is not threadsafe for writing
  141.    Mm 2 3                          #pragma omp critical
  142.    Mm 2 3                  #endif
  143.  + Mm 2 3                          A.globalToLocalMap[currentGlobalRow] = currentLocalRow;
  144.    Mm 2 3                  
  145.    Mm 2 3 I                        A.localToGlobalMap[currentLocalRow] = currentGlobalRow;
  146.    Mm 2 3                  #ifdef HPCG_DETAILED_DEBUG
  147.    Mm 2 3                          HPCG_fout << " rank, globalRow, localRow = " << A.geom->rank << " " << currentGlobalRow << " " << A.globalToLocalMap[currentGlobalRow] << endl;
  148.    Mm 2 3                  #endif
  149.    Mm 2 3                          char numberOfNonzerosInRow = 0;
  150.    Mm 2 3                          double * currentValuePointer = matrixValues[currentLocalRow]; // Pointer to current value in current row
  151.    Mm 2 3                          global_int_t * currentIndexPointerG = mtxIndG[currentLocalRow]; // Pointer to current index in current row
  152.  + Mm 2 3 4--------------<         for (int sz=-1; sz<=1; sz++) {
  153.    Mm 2 3 4                          if (giz+sz>-1 && giz+sz<gnz) {
  154.    Mm 2 3 4 Vp-----------<             for (int sy=-1; sy<=1; sy++) {
  155.    Mm 2 3 4 Vp                           if (giy+sy>-1 && giy+sy<gny) {
  156.  + Mm 2 3 4 Vp 6---------<                 for (int sx=-1; sx<=1; sx++) {
  157.    Mm 2 3 4 Vp 6                             if (gix+sx>-1 && gix+sx<gnx) {
  158.    Mm 2 3 4 Vp 6                               global_int_t curcol = currentGlobalRow+sz*gnx*gny+sy*gnx+sx;
  159.    Mm 2 3 4 Vp 6                               if (curcol==currentGlobalRow) {
  160.    Mm 2 3 4 Vp 6                                 matrixDiagonal[currentLocalRow] = currentValuePointer;
  161.    Mm 2 3 4 Vp 6                                 *currentValuePointer++ = 26.0;
  162.    Mm 2 3 4 Vp 6                               } else {
  163.    Mm 2 3 4 Vp 6                                 *currentValuePointer++ = -1.0;
  164.    Mm 2 3 4 Vp 6                               }
  165.    Mm 2 3 4 Vp 6                               *currentIndexPointerG++ = curcol;
  166.    Mm 2 3 4 Vp 6                               numberOfNonzerosInRow++;
  167.    Mm 2 3 4 Vp 6                             } // end x bounds test
  168.    Mm 2 3 4 Vp 6--------->                 } // end sx loop
  169.    Mm 2 3 4 Vp                           } // end y bounds test
  170.    Mm 2 3 4 Vp----------->             } // end sy loop
  171.    Mm 2 3 4                          } // end z bounds test
  172.    Mm 2 3 4-------------->         } // end sz loop
  173.    Mm 2 3                          nonzerosInRow[currentLocalRow] = numberOfNonzerosInRow;
  174.    Mm 2 3                  #ifndef HPCG_NO_OPENMP
  175.    Mm 2 3                          #pragma omp critical
  176.    Mm 2 3                  #endif
  177.    Mm 2 3                          localNumberOfNonzeros += numberOfNonzerosInRow; // Protect this with an atomic
  178.    Mm 2 3                          if (b!=0)      bv[currentLocalRow] = 26.0 - ((double) (numberOfNonzerosInRow-1));
  179.    Mm 2 3                          if (x!=0)      xv[currentLocalRow] = 0.0;
  180.    Mm 2 3                          if (xexact!=0) xexactv[currentLocalRow] = 1.0;
  181.    Mm 2 3---------------->       } // end ix loop
  182.    Mm 2------------------>     } // end iy loop
  183.    Mm-------------------->   } // end iz loop
  184.                            #ifdef HPCG_DETAILED_DEBUG
  185.                              HPCG_fout     << "Process " << A.geom->rank << " of " << A.geom->size <<" has " << localNumberOfRows    << " rows."     << endl
  186.                                  << "Process " << A.geom->rank << " of " << A.geom->size <<" has " << localNumberOfNonzeros<< " nonzeros." <<endl;
  187.                            #endif
  188.                            
  189.                              global_int_t totalNumberOfNonzeros = 0;
  190.                            #ifndef HPCG_NO_MPI
  191.                              // Use MPI's reduce function to sum all nonzeros
  192.                            #ifdef HPCG_NO_LONG_LONG
  193.                              MPI_Allreduce(&localNumberOfNonzeros, &totalNumberOfNonzeros, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
  194.                            #else
  195.                              long long lnnz = localNumberOfNonzeros, gnnz = 0; // convert to 64 bit for MPI call
  196.  +                           MPI_Allreduce(&lnnz, &gnnz, 1, MPI_LONG_LONG_INT, MPI_SUM, MPI_COMM_WORLD);
  197.                              totalNumberOfNonzeros = gnnz; // Copy back
  198.                            #endif
  199.                            #else
  200.                              totalNumberOfNonzeros = localNumberOfNonzeros;
  201.                            #endif
  202.                              // If this assert fails, it most likely means that the global_int_t is set to int and should be set to long long
  203.                              // This assert is usually the first to fail as problem size increases beyond the 32-bit integer range.
  204.                              assert(totalNumberOfNonzeros>0); // Throw an exception of the number of nonzeros is less than zero (can happen if int overflow)
  205.                            
  206.                              A.title = 0;
  207.                              A.totalNumberOfRows = totalNumberOfRows;
  208.                              A.totalNumberOfNonzeros = totalNumberOfNonzeros;
  209.                              A.localNumberOfRows = localNumberOfRows;
  210.                              A.localNumberOfColumns = localNumberOfRows;
  211.                              A.localNumberOfNonzeros = localNumberOfNonzeros;
  212.                              A.nonzerosInRow = nonzerosInRow;
  213.                              A.mtxIndG = mtxIndG;
  214.                              A.mtxIndL = mtxIndL;
  215.                              A.matrixValues = matrixValues;
  216.                              A.matrixDiagonal = matrixDiagonal;
  217.                            
  218.                              return;
  219.                            }

CC-6254 CC: VECTOR __uninit_default_n<pointer, size_type>, File = stl_uninitialized.h, Line = 548 
  A loop was not vectorized because a recurrence was found on "__niter" at line 548.

CC-3001 CC: IPA <unnamed>, File = stl_vector.h, Line = 1640, Column = 18 
  Tiny leaf routine "move_iterator"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:1030) was textually inlined.

CC-6254 CC: VECTOR _M_default_append, File = vector.tcc, Line = 595 
  A loop was not vectorized because a recurrence was found on "__niter" at line 595.

CC-6254 CC: VECTOR _M_default_append, File = vector.tcc, Line = 613 
  A loop was not vectorized because a recurrence was found on "__niter" at line 613.

CC-3001 CC: IPA <unnamed>, File = basic_string.h, Line = 6571, Column = 15 
  Tiny leaf routine "_Hash_node_base"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:219) was textually inlined.

CC-3001 CC: IPA <unnamed>, File = hashtable.h, Line = 654, Column = 15 
  Tiny routine "pair<const key_type &>"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:364) was textually inlined and
  flattened.

CC-3001 CC: IPA <unnamed>, File = hashtable.h, Line = 654, Column = 15 
  Tiny routine "pair<const key_type &, 0UL>"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:431) was textually
  inlined and flattened.

CC-3001 CC: IPA <unnamed>, File = hashtable.h, Line = 654, Column = 15 
  Tiny routine "_Hash_node_value_base"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:230) was textually inlined. 
  NOT INLINED:  __cxa_call_unexpected.

CC-3001 CC: IPA <unnamed>, File = hashtable.h, Line = 654, Column = 15 
  Tiny routine "_Hash_node"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:257) was textually inlined.  NOT INLINED: 
  __cxa_call_unexpected : __cxa_call_unexpected.

CC-6289 CC: VECTOR _M_find_before_node, File = hashtable.h, Line = 1561 
  A loop was not vectorized because a recurrence was found on "__p" between lines 1569 and 1562.

CC-3001 CC: IPA <unnamed>, File = hashtable.h, Line = 2110, Column = 19 
  Tiny routine "_Node_iterator"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:341) was textually inlined.  NOT
  INLINED:  __cxa_call_unexpected.

CC-6254 CC: VECTOR _M_rehash_aux, File = hashtable.h, Line = 2111 
  A loop was not vectorized because a recurrence was found on "__bbegin_bkt" at line 2122.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 75, Column = 24 
  Tiny routine "operator new[]"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:2111) was textually inlined.  NOT
  INLINED:  operator new.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 76, Column = 27 
  Tiny routine "operator new[]"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:2111) was textually inlined.  NOT
  INLINED:  operator new.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 77, Column = 27 
  Tiny routine "operator new[]"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:2111) was textually inlined.  NOT
  INLINED:  operator new.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 78, Column = 26 
  Tiny routine "operator new[]"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:2111) was textually inlined.  NOT
  INLINED:  operator new.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 79, Column = 28 
  Tiny routine "operator new[]"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:2111) was textually inlined.  NOT
  INLINED:  operator new.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 81, Column = 13 
  Tiny routine "InitializeVector"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:45) was textually inlined.  NOT
  INLINED:  __cxa_throw_bad_array_new_length : operator new.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 82, Column = 13 
  Tiny routine "InitializeVector"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:45) was textually inlined.  NOT
  INLINED:  __cxa_throw_bad_array_new_length : operator new.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 83, Column = 18 
  Tiny routine "InitializeVector"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:45) was textually inlined.  NOT
  INLINED:  __cxa_throw_bad_array_new_length : operator new.

CC-3118 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 90, Column = 3 
  "resize"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:824) was not inlined because the call site will not
  flatten.  "_Znwm" is missing.

CC-6308 CC: VECTOR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 97 
  A loop was not vectorized because the loop initialization would be too costly.

CC-6005 CC: SCALAR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 97 
  A loop was unrolled 4 times.

CC-6823 CC: THREAD GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 97 
  A region starting at line 97 and ending at line 102 was multi-threaded.

CC-6817 CC: THREAD GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 97 
  A loop was partitioned.

CC-6287 CC: VECTOR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 106 
  A loop was not vectorized because it contains a call to function "operator new " on line 107.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 107, Column = 5 
  Tiny routine "operator new[]"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:2111) was textually inlined.  NOT
  INLINED:  operator new.

CC-6287 CC: VECTOR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 108 
  A loop was not vectorized because it contains a call to function "operator new " on line 109.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 109, Column = 5 
  Tiny routine "operator new[]"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:2111) was textually inlined.  NOT
  INLINED:  operator new.

CC-6287 CC: VECTOR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 110 
  A loop was not vectorized because it contains a call to function "operator new " on line 111.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 111, Column = 4 
  Tiny routine "operator new[]"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:2111) was textually inlined.  NOT
  INLINED:  operator new.

CC-6287 CC: VECTOR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 131 
  A loop was not vectorized because it contains a call to function "std::unordered_map<long long, int, std::hash<long long>,
  std::equal_to<long long>, std::allocator<std::pair<const long long, int>>>::operator []" on line 143.

CC-6823 CC: THREAD GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 131 
  A region starting at line 131 and ending at line 183 was multi-threaded.

CC-6817 CC: THREAD GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 131 
  A loop was partitioned.

CC-6287 CC: VECTOR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 133 
  A loop was not vectorized because it contains a call to function "std::unordered_map<long long, int, std::hash<long long>,
  std::equal_to<long long>, std::allocator<std::pair<const long long, int>>>::operator []" on line 143.

CC-6287 CC: VECTOR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 135 
  A loop was not vectorized because it contains a call to function "std::unordered_map<long long, int, std::hash<long long>,
  std::equal_to<long long>, std::allocator<std::pair<const long long, int>>>::operator []" on line 143.

CC-3118 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 143, Column = 9 
  "operator[]"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:976) was not inlined because the call site will not
  flatten.  "__cxa_end_catch" is missing.

CC-3001 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 145, Column = 9 
  Tiny leaf routine "operator[]"(/cray/css/users/smehta/hpcg-orig/src/GenerateProblem_ref.cpp:930) was textually inlined.

CC-6290 CC: VECTOR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 152 
  A loop was not vectorized because a recurrence was found between "currentGlobalRow" and "currentIndexPointerG" at line 165.

CC-6217 CC: VECTOR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 154 
  A loop was partially and conditionally vectorized.

CC-6290 CC: VECTOR GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 156 
  A loop was not vectorized because a recurrence was found between "currentGlobalRow" and "currentIndexPointerG" at line 165.

CC-3021 CC: IPA GenerateProblem_ref, File = GenerateProblem_ref.cpp, Line = 196, Column = 3 
  "MPI_Allreduce" was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
