%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /cray/css/users/smehta/hpcg-orig/src/WriteProblem.cpp
Compiled : 2020-06-04  19:33:18
Compiler : Version 10.0.x.x
Ftnlx    : Version 10.0.x.x 
Target   : arm64
Command  : driver.CC -h cpu=arm-nsp1 -h network=aries -h dynamic -D __CRAYXC
           -D __CRAY_ARM_NSP1 -D __CRAY_AARCH64
           -D __CRAYXT_COMPUTE_LINUX_TARGET -I ./src -I ./src/CCE -h list=m
           -h omp -c -o src/WriteProblem.o src/WriteProblem.cpp
           -W l,-rpath=/cray/css/compiler/builds/release/cce/10.0.20200603211505
           _15e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/lib
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/craylibs
           -isystem /opt/gcc/8.1.0/snos/include/g++
           -isystem /opt/gcc/8.1.0/snos/include/g++/aarch64-unknown-linux-gnu
           -isystem /opt/gcc/8.1.0/snos/include/g++/backward
           -isystem /opt/gcc/8.1.0/snos/lib/gcc/aarch64-unknown-linux-gnu/8.1.0/
           include
           -isystem /opt/gcc/8.1.0/snos/lib/gcc/aarch64-unknown-linux-gnu/8.1.0/
           include-fixed
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/c++
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/basic
           -isystem /opt/gcc/8.1.0/snos/include
           -isystem /cray/css/pesim/armv8-sve-cross/moduledirs/aarch64-sle-sysro
           ot/12.1/usr/include
           -I /cray/css/pesim/armv8-sve-cross/moduledirs/anl-mpich/3.2.0.4/aarch
           64/gige/mpich-cray/8.6/include

clx report
------------
Source   : /cray/css/users/smehta/hpcg-orig/src/WriteProblem.cpp
Date     : 06/04/2020  19:33:19


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.            
    2.            //@HEADER
    3.            // ***************************************************
    4.            //
    5.            // HPCG: High Performance Conjugate Gradient Benchmark
    6.            //
    7.            // Contact:
    8.            // Michael A. Heroux ( maherou@sandia.gov)
    9.            // Jack Dongarra     (dongarra@eecs.utk.edu)
   10.            // Piotr Luszczek    (luszczek@eecs.utk.edu)
   11.            //
   12.            // ***************************************************
   13.            //@HEADER
   14.            
   15.            /*!
   16.             @file WriteProblem.cpp
   17.            
   18.             HPCG routine
   19.             */
   20.            
   21.            #include <cstdio>
   22.            #include "WriteProblem.hpp"
   23.            
   24.            
   25.            /*!
   26.              Routine to dump:
   27.               - matrix in row, col, val format for analysis with MATLAB
   28.               - x, xexact, b as simple arrays of numbers.
   29.            
   30.               Writes to A.dat, x.dat, xexact.dat and b.dat, respectivly.
   31.            
   32.               NOTE:  THIS CODE ONLY WORKS ON SINGLE PROCESSOR RUNS
   33.            
   34.               Read into MATLAB using:
   35.            
   36.                   load A.dat
   37.                   A=spconvert(A);
   38.                   load x.dat
   39.                   load xexact.dat
   40.                   load b.dat
   41.            
   42.              @param[in] geom   The description of the problem's geometry.
   43.              @param[in] A      The known system matrix
   44.              @param[in] b      The known right hand side vector
   45.              @param[in] x      The solution vector computed by CG iteration
   46.              @param[in] xexact Generated exact solution
   47.            
   48.              @return Returns with -1 if used with more than one MPI process. Returns with 0 otherwise.
   49.            
   50.              @see GenerateProblem
   51.            */
   52.            int WriteProblem( const Geometry & geom, const SparseMatrix & A,
   53.                const Vector b, const Vector x, const Vector xexact) {
   54.            
   55.              if (geom.size!=1) return -1; //TODO Only works on one processor.  Need better error handler
   56.              const global_int_t nrow = A.totalNumberOfRows;
   57.            
   58.              FILE * fA = 0, * fx = 0, * fxexact = 0, * fb = 0;
   59.  +           fA = fopen("A.dat", "w");
   60.  +           fx = fopen("x.dat", "w");
   61.  +           fxexact = fopen("xexact.dat", "w");
   62.  +           fb = fopen("b.dat", "w");
   63.            
   64.              if (! fA || ! fx || ! fxexact || ! fb) {
   65.  +             if (fb) fclose(fb);
   66.  +             if (fxexact) fclose(fxexact);
   67.  +             if (fx) fclose(fx);
   68.  +             if (fA) fclose(fA);
   69.                return -1;
   70.              }
   71.            
   72.  + 1-----<   for (global_int_t i=0; i< nrow; i++) {
   73.    1           const double * const currentRowValues = A.matrixValues[i];
   74.    1           const global_int_t * const currentRowIndices = A.mtxIndG[i];
   75.    1           const int currentNumberOfNonzeros = A.nonzerosInRow[i];
   76.  + 1 2---<     for (int j=0; j< currentNumberOfNonzeros; j++)
   77.    1 2     #ifdef HPCG_NO_LONG_LONG
   78.    1 2           fprintf(fA, " %d %d %22.16e\n",i+1,(global_int_t)(currentRowIndices[j]+1),currentRowValues[j]);
   79.    1 2     #else
   80.  + 1 2--->       fprintf(fA, " %lld %lld %22.16e\n",i+1,(global_int_t)(currentRowIndices[j]+1),currentRowValues[j]);
   81.    1       #endif
   82.  + 1           fprintf(fx, "%22.16e\n",x.values[i]);
   83.  + 1           fprintf(fxexact, "%22.16e\n",xexact.values[i]);
   84.  + 1           fprintf(fb, "%22.16e\n",b.values[i]);
   85.    1----->   }
   86.            
   87.  +           fclose(fA);
   88.  +           fclose(fx);
   89.  +           fclose(fxexact);
   90.  +           fclose(fb);
   91.              return 0;
   92.            }

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 59, Column = 3 
  "fopen" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 60, Column = 3 
  "fopen" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 61, Column = 3 
  "fopen" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 62, Column = 3 
  "fopen" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 65, Column = 13 
  "fclose" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 66, Column = 18 
  "fclose" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 67, Column = 13 
  "fclose" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 68, Column = 13 
  "fclose" was not inlined because the compiler was unable to locate the routine.

CC-6287 CC: VECTOR WriteProblem, File = WriteProblem.cpp, Line = 72 
  A loop was not vectorized because it contains a call to function "fprintf" on line 80.

CC-6287 CC: VECTOR WriteProblem, File = WriteProblem.cpp, Line = 76 
  A loop was not vectorized because it contains a call to function "fprintf" on line 80.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 80, Column = 7 
  "fprintf" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 82, Column = 5 
  "fprintf" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 83, Column = 5 
  "fprintf" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 84, Column = 5 
  "fprintf" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 87, Column = 3 
  "fclose" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 88, Column = 3 
  "fclose" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 89, Column = 3 
  "fclose" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA WriteProblem, File = WriteProblem.cpp, Line = 90, Column = 3 
  "fclose" was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
