%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /cray/css/users/smehta/hpcg-orig/src/ExchangeHalo.cpp
Compiled : 2020-06-04  19:33:18
Compiler : Version 10.0.x.x
Ftnlx    : Version 10.0.x.x 
Target   : arm64
Command  : driver.CC -h cpu=arm-nsp1 -h network=aries -h dynamic -D __CRAYXC
           -D __CRAY_ARM_NSP1 -D __CRAY_AARCH64
           -D __CRAYXT_COMPUTE_LINUX_TARGET -I ./src -I ./src/CCE -h list=m
           -h omp -c -o src/ExchangeHalo.o src/ExchangeHalo.cpp
           -W l,-rpath=/cray/css/compiler/builds/release/cce/10.0.20200603211505
           _15e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/lib
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/craylibs
           -isystem /opt/gcc/8.1.0/snos/include/g++
           -isystem /opt/gcc/8.1.0/snos/include/g++/aarch64-unknown-linux-gnu
           -isystem /opt/gcc/8.1.0/snos/include/g++/backward
           -isystem /opt/gcc/8.1.0/snos/lib/gcc/aarch64-unknown-linux-gnu/8.1.0/
           include
           -isystem /opt/gcc/8.1.0/snos/lib/gcc/aarch64-unknown-linux-gnu/8.1.0/
           include-fixed
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/c++
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/basic
           -isystem /opt/gcc/8.1.0/snos/include
           -isystem /cray/css/pesim/armv8-sve-cross/moduledirs/aarch64-sle-sysro
           ot/12.1/usr/include
           -I /cray/css/pesim/armv8-sve-cross/moduledirs/anl-mpich/3.2.0.4/aarch
           64/gige/mpich-cray/8.6/include

clx report
------------
Source   : /cray/css/users/smehta/hpcg-orig/src/ExchangeHalo.cpp
Date     : 06/04/2020  19:33:20


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.               
    2.               //@HEADER
    3.               // ***************************************************
    4.               //
    5.               // HPCG: High Performance Conjugate Gradient Benchmark
    6.               //
    7.               // Contact:
    8.               // Michael A. Heroux ( maherou@sandia.gov)
    9.               // Jack Dongarra     (dongarra@eecs.utk.edu)
   10.               // Piotr Luszczek    (luszczek@eecs.utk.edu)
   11.               //
   12.               // ***************************************************
   13.               //@HEADER
   14.               
   15.               /*!
   16.                @file ExchangeHalo.cpp
   17.               
   18.                HPCG routine
   19.                */
   20.               
   21.               // Compile this routine only if running with MPI
   22.               #ifndef HPCG_NO_MPI
   23.               #include <mpi.h>
   24.               #include "Geometry.hpp"
   25.               #include "ExchangeHalo.hpp"
   26.               #include <cstdlib>
   27.               
   28.               /*!
   29.                 Communicates data that is at the border of the part of the domain assigned to this processor.
   30.               
   31.                 @param[in]    A The known system matrix
   32.                 @param[inout] x On entry: the local vector entries followed by entries to be communicated; on exit: the vector with non-local entries updated by other processors
   33.                */
   34.               void ExchangeHalo(const SparseMatrix & A, Vector & x) {
   35.               
   36.                 // Extract Matrix pieces
   37.               
   38.                 local_int_t localNumberOfRows = A.localNumberOfRows;
   39.                 int num_neighbors = A.numberOfSendNeighbors;
   40.                 local_int_t * receiveLength = A.receiveLength;
   41.                 local_int_t * sendLength = A.sendLength;
   42.                 int * neighbors = A.neighbors;
   43.                 double * sendBuffer = A.sendBuffer;
   44.                 local_int_t totalToBeSent = A.totalToBeSent;
   45.                 local_int_t * elementsToSend = A.elementsToSend;
   46.               
   47.                 double * const xv = x.values;
   48.               
   49.                 int size, rank; // Number of MPI processes, My process ID
   50.  +              MPI_Comm_size(MPI_COMM_WORLD, &size);
   51.  +              MPI_Comm_rank(MPI_COMM_WORLD, &rank);
   52.               
   53.                 //
   54.                 //  first post receives, these are immediate receives
   55.                 //  Do not wait for result to come, will do that at the
   56.                 //  wait call below.
   57.                 //
   58.               
   59.                 int MPI_MY_TAG = 99;
   60.               
   61.    Ip           MPI_Request * request = new MPI_Request[num_neighbors];
   62.               
   63.                 //
   64.                 // Externals are at end of locals
   65.                 //
   66.                 double * x_external = (double *) xv + localNumberOfRows;
   67.               
   68.               //printf("Rank, Neighbours (1, 2, n-1) = %d, %d (%d %d %d) \n",rank, num_neighbors, neighbors[0], neighbors[1], neighbors[num_neighbors-1]);fflush(stdout);
   69.               
   70.                 // Post receives first
   71.                 // TODO: Thread this loop
   72.  + 1--------<   for (int i = 0; i < num_neighbors; i++) {
   73.    1              local_int_t n_recv = receiveLength[i];
   74.  + 1              MPI_Irecv(x_external, n_recv, MPI_DOUBLE, neighbors[i], MPI_MY_TAG, MPI_COMM_WORLD, request+i);
   75.    1              x_external += n_recv;
   76.    1-------->   }
   77.               
   78.               
   79.                 //
   80.                 // Fill up send buffer
   81.                 //
   82.               
   83.                 // TODO: Thread this loop
   84.  + r4------<>   for (local_int_t i=0; i<totalToBeSent; i++) sendBuffer[i] = xv[elementsToSend[i]];
   85.               
   86.                 //
   87.                 // Send to each neighbor
   88.                 //
   89.               
   90.                 // TODO: Thread this loop
   91.  + 1--------<   for (int i = 0; i < num_neighbors; i++) {
   92.    1              local_int_t n_send = sendLength[i];
   93.  + 1              MPI_Send(sendBuffer, n_send, MPI_DOUBLE, neighbors[i], MPI_MY_TAG, MPI_COMM_WORLD);
   94.    1              sendBuffer += n_send;
   95.    1-------->   }
   96.               
   97.                 //
   98.                 // Complete the reads issued above
   99.                 //
  100.               
  101.                 MPI_Status status;
  102.                 // TODO: Thread this loop
  103.  + 1--------<   for (int i = 0; i < num_neighbors; i++) {
  104.  + 1              if ( MPI_Wait(request+i, &status) ) {
  105.  + 1                std::exit(-1); // TODO: have better error exit
  106.    1              }
  107.    1-------->   }
  108.               
  109.    I            delete [] request;
  110.               
  111.                 return;
  112.               }
  113.               #endif
  114.               // ifndef HPCG_NO_MPI

CC-3021 CC: IPA ExchangeHalo, File = ExchangeHalo.cpp, Line = 50, Column = 3 
  "MPI_Comm_size" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA ExchangeHalo, File = ExchangeHalo.cpp, Line = 51, Column = 3 
  "MPI_Comm_rank" was not inlined because the compiler was unable to locate the routine.

CC-3001 CC: IPA ExchangeHalo, File = ExchangeHalo.cpp, Line = 61, Column = 25 
  Tiny routine "operator new[]"(/cray/css/users/smehta/hpcg-orig/src/ExchangeHalo.cpp:2110) was textually inlined.  NOT INLINED: 
  operator new.

CC-6287 CC: VECTOR ExchangeHalo, File = ExchangeHalo.cpp, Line = 72 
  A loop was not vectorized because it contains a call to function "MPI_Irecv" on line 74.

CC-3021 CC: IPA ExchangeHalo, File = ExchangeHalo.cpp, Line = 74, Column = 5 
  "MPI_Irecv" was not inlined because the compiler was unable to locate the routine.

CC-6005 CC: SCALAR ExchangeHalo, File = ExchangeHalo.cpp, Line = 84 
  A loop was unrolled 4 times.

CC-6290 CC: VECTOR ExchangeHalo, File = ExchangeHalo.cpp, Line = 84 
  A loop was not vectorized because a recurrence was found between "xv" and "sendBuffer" at line 84.

CC-6287 CC: VECTOR ExchangeHalo, File = ExchangeHalo.cpp, Line = 91 
  A loop was not vectorized because it contains a call to function "MPI_Send" on line 93.

CC-3021 CC: IPA ExchangeHalo, File = ExchangeHalo.cpp, Line = 93, Column = 5 
  "MPI_Send" was not inlined because the compiler was unable to locate the routine.

CC-6287 CC: VECTOR ExchangeHalo, File = ExchangeHalo.cpp, Line = 103 
  A loop was not vectorized because it contains a call to function "MPI_Wait" on line 104.

CC-3021 CC: IPA ExchangeHalo, File = ExchangeHalo.cpp, Line = 104, Column = 5 
  "MPI_Wait" was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA ExchangeHalo, File = ExchangeHalo.cpp, Line = 105, Column = 7 
  "exit" was not inlined because the compiler was unable to locate the routine.

CC-3001 CC: IPA ExchangeHalo, File = ExchangeHalo.cpp, Line = 109, Column = 3 
  Tiny routine "operator delete[]"(/cray/css/users/smehta/hpcg-orig/src/ExchangeHalo.cpp:2110) was textually inlined and flattened.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
