%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /cray/css/users/smehta/hpcg-orig/src/ComputeWAXPBY.cpp
Compiled : 2020-06-04  19:33:18
Compiler : Version 10.0.x.x
Ftnlx    : Version 10.0.x.x 
Target   : arm64
Command  : driver.CC -h cpu=arm-nsp1 -h network=aries -h dynamic -D __CRAYXC
           -D __CRAY_ARM_NSP1 -D __CRAY_AARCH64
           -D __CRAYXT_COMPUTE_LINUX_TARGET -I ./src -I ./src/CCE -h list=m
           -h omp -c -o src/ComputeWAXPBY.o src/ComputeWAXPBY.cpp
           -W l,-rpath=/cray/css/compiler/builds/release/cce/10.0.20200603211505
           _15e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/lib
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/craylibs
           -isystem /opt/gcc/8.1.0/snos/include/g++
           -isystem /opt/gcc/8.1.0/snos/include/g++/aarch64-unknown-linux-gnu
           -isystem /opt/gcc/8.1.0/snos/include/g++/backward
           -isystem /opt/gcc/8.1.0/snos/lib/gcc/aarch64-unknown-linux-gnu/8.1.0/
           include
           -isystem /opt/gcc/8.1.0/snos/lib/gcc/aarch64-unknown-linux-gnu/8.1.0/
           include-fixed
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/c++
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/basic
           -isystem /opt/gcc/8.1.0/snos/include
           -isystem /cray/css/pesim/armv8-sve-cross/moduledirs/aarch64-sle-sysro
           ot/12.1/usr/include
           -I /cray/css/pesim/armv8-sve-cross/moduledirs/anl-mpich/3.2.0.4/aarch
           64/gige/mpich-cray/8.6/include

clx report
------------
Source   : /cray/css/users/smehta/hpcg-orig/src/ComputeWAXPBY.cpp
Date     : 06/04/2020  19:33:19


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.          
    2.          //@HEADER
    3.          // ***************************************************
    4.          //
    5.          // HPCG: High Performance Conjugate Gradient Benchmark
    6.          //
    7.          // Contact:
    8.          // Michael A. Heroux ( maherou@sandia.gov)
    9.          // Jack Dongarra     (dongarra@eecs.utk.edu)
   10.          // Piotr Luszczek    (luszczek@eecs.utk.edu)
   11.          //
   12.          // ***************************************************
   13.          //@HEADER
   14.          
   15.          /*!
   16.           @file ComputeWAXPBY.cpp
   17.          
   18.           HPCG routine
   19.           */
   20.          
   21.          #include "ComputeWAXPBY.hpp"
   22.          #include "ComputeWAXPBY_ref.hpp"
   23.          
   24.          /*!
   25.            Routine to compute the update of a vector with the sum of two
   26.            scaled vectors where: w = alpha*x + beta*y
   27.          
   28.            This routine calls the reference WAXPBY implementation by default, but
   29.            can be replaced by a custom, optimized routine suited for
   30.            the target system.
   31.          
   32.            @param[in] n the number of vector elements (on this processor)
   33.            @param[in] alpha, beta the scalars applied to x and y respectively.
   34.            @param[in] x, y the input vectors
   35.            @param[out] w the output vector
   36.            @param[out] isOptimized should be set to false if this routine uses the reference implementation (is not optimized); otherwise leave it unchanged
   37.          
   38.            @return returns 0 upon success and non-zero otherwise
   39.          
   40.            @see ComputeWAXPBY_ref
   41.          */
   42.          int ComputeWAXPBY(const local_int_t n, const double alpha, const Vector & x,
   43.              const double beta, const Vector & y, Vector & w, bool & isOptimized) {
   44.          
   45.            // This line and the next two lines should be removed and your version of ComputeWAXPBY should be used.
   46.            isOptimized = false;
   47.  +         return ComputeWAXPBY_ref(n, alpha, x, beta, y, w);
   48.          }

CC-3021 CC: IPA ComputeWAXPBY, File = ComputeWAXPBY.cpp, Line = 47, Column = 3 
  "ComputeWAXPBY_ref" was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
