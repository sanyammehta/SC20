%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /cray/css/users/smehta/hpcg-orig/src/CheckProblem.cpp
Compiled : 2020-06-04  19:33:18
Compiler : Version 10.0.x.x
Ftnlx    : Version 10.0.x.x 
Target   : arm64
Command  : driver.CC -h cpu=arm-nsp1 -h network=aries -h dynamic -D __CRAYXC
           -D __CRAY_ARM_NSP1 -D __CRAY_AARCH64
           -D __CRAYXT_COMPUTE_LINUX_TARGET -I ./src -I ./src/CCE -h list=m
           -h omp -c -o src/CheckProblem.o src/CheckProblem.cpp
           -W l,-rpath=/cray/css/compiler/builds/release/cce/10.0.20200603211505
           _15e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/lib
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/craylibs
           -isystem /opt/gcc/8.1.0/snos/include/g++
           -isystem /opt/gcc/8.1.0/snos/include/g++/aarch64-unknown-linux-gnu
           -isystem /opt/gcc/8.1.0/snos/include/g++/backward
           -isystem /opt/gcc/8.1.0/snos/lib/gcc/aarch64-unknown-linux-gnu/8.1.0/
           include
           -isystem /opt/gcc/8.1.0/snos/lib/gcc/aarch64-unknown-linux-gnu/8.1.0/
           include-fixed
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/c++
           -isystem /cray/css/compiler/builds/release/cce/10.0.20200603211505_15
           e263491fba367aa4f23381e4b9aafeb285582e/cce/aarch64/include/basic
           -isystem /opt/gcc/8.1.0/snos/include
           -isystem /cray/css/pesim/armv8-sve-cross/moduledirs/aarch64-sle-sysro
           ot/12.1/usr/include
           -I /cray/css/pesim/armv8-sve-cross/moduledirs/anl-mpich/3.2.0.4/aarch
           64/gige/mpich-cray/8.6/include

clx report
------------
Source   : /cray/css/users/smehta/hpcg-orig/src/CheckProblem.cpp
Date     : 06/04/2020  19:33:20


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned                
     F - Flat - No calls      f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
     R - Rerolling            r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.                        
    2.                        //@HEADER
    3.                        // ***************************************************
    4.                        //
    5.                        // HPCG: High Performance Conjugate Gradient Benchmark
    6.                        //
    7.                        // Contact:
    8.                        // Michael A. Heroux ( maherou@sandia.gov)
    9.                        // Jack Dongarra     (dongarra@eecs.utk.edu)
   10.                        // Piotr Luszczek    (luszczek@eecs.utk.edu)
   11.                        //
   12.                        // ***************************************************
   13.                        //@HEADER
   14.                        
   15.                        /*!
   16.                         @file CheckProblem.cpp
   17.                        
   18.                         HPCG routine
   19.                         */
   20.                        
   21.                        #ifndef HPCG_NO_MPI
   22.                        #include <mpi.h>
   23.                        #endif
   24.                        
   25.                        #ifndef HPCG_NO_OPENMP
   26.                        #include <omp.h>
   27.                        #endif
   28.                        
   29.                        #if defined(HPCG_DEBUG) || defined(HPCG_DETAILED_DEBUG)
   30.                        #include <fstream>
   31.                        using std::endl;
   32.                        #include "hpcg.hpp"
   33.                        #endif
   34.                        #include <cassert>
   35.                        
   36.                        #include "CheckProblem.hpp"
   37.                        
   38.                        
   39.                        /*!
   40.                          Check the contents of the generated sparse matrix to see if values match expected contents.
   41.                        
   42.                          @param[in]  A      The known system matrix
   43.                          @param[inout] b      The newly allocated and generated right hand side vector (if b!=0 on entry)
   44.                          @param[inout] x      The newly allocated solution vector with entries set to 0.0 (if x!=0 on entry)
   45.                          @param[inout] xexact The newly allocated solution vector with entries set to the exact solution (if the xexact!=0 non-zero on entry)
   46.                        
   47.                          @see GenerateGeometry
   48.                        */
   49.                        
   50.                        void CheckProblem(SparseMatrix & A, Vector * b, Vector * x, Vector * xexact) {
   51.                        
   52.                          // Make local copies of geometry information.  Use global_int_t since the RHS products in the calculations
   53.                          // below may result in global range values.
   54.                          global_int_t nx = A.geom->nx;
   55.                          global_int_t ny = A.geom->ny;
   56.                          global_int_t nz = A.geom->nz;
   57.                          global_int_t gnx = A.geom->gnx;
   58.                          global_int_t gny = A.geom->gny;
   59.                          global_int_t gnz = A.geom->gnz;
   60.                          global_int_t gix0 = A.geom->gix0;
   61.                          global_int_t giy0 = A.geom->giy0;
   62.                          global_int_t giz0 = A.geom->giz0;
   63.                        
   64.                          local_int_t localNumberOfRows = nx*ny*nz; // This is the size of our subblock
   65.                          global_int_t totalNumberOfRows = gnx*gny*gnz; // Total number of grid points in mesh
   66.                        
   67.                          double * bv = 0;
   68.                          double * xv = 0;
   69.                          double * xexactv = 0;
   70.                          if (b!=0) bv = b->values; // Only compute exact solution if requested
   71.                          if (x!=0) xv = x->values; // Only compute exact solution if requested
   72.                          if (xexact!=0) xexactv = xexact->values; // Only compute exact solution if requested
   73.                        
   74.                          local_int_t localNumberOfNonzeros = 0;
   75.                          // TODO:  This triply nested loop could be flattened or use nested parallelism
   76.                        #ifndef HPCG_NO_OPENMP
   77.                          #pragma omp parallel for
   78.                        #endif
   79.  + MmF---------------<   for (local_int_t iz=0; iz<nz; iz++) {
   80.    MmF                     global_int_t giz = giz0+iz;
   81.  + MmF F-------------<     for (local_int_t iy=0; iy<ny; iy++) {
   82.    MmF F                     global_int_t giy = giy0+iy;
   83.  + MmF F F-----------<       for (local_int_t ix=0; ix<nx; ix++) {
   84.    MmF F F                     global_int_t gix = gix0+ix;
   85.    MmF F F                     local_int_t currentLocalRow = iz*nx*ny+iy*nx+ix;
   86.    MmF F F                     global_int_t currentGlobalRow = giz*gnx*gny+giy*gnx+gix;
   87.    MmF F F I                   assert(A.localToGlobalMap[currentLocalRow] == currentGlobalRow);
   88.    MmF F F             #ifdef HPCG_DETAILED_DEBUG
   89.    MmF F F                     HPCG_fout << " rank, globalRow, localRow = " << A.geom->rank << " " << currentGlobalRow << " " << A.globalToLocalMap[currentGlobalRow] << endl;
   90.    MmF F F             #endif
   91.    MmF F F                     char numberOfNonzerosInRow = 0;
   92.    MmF F F                     double * currentValuePointer = A.matrixValues[currentLocalRow]; // Pointer to current value in current row
   93.    MmF F F                     global_int_t * currentIndexPointerG = A.mtxIndG[currentLocalRow]; // Pointer to current index in current row
   94.  + MmF F F F---------<         for (int sz=-1; sz<=1; sz++) {
   95.    MmF F F F                     if (giz+sz>-1 && giz+sz<gnz) {
   96.  + MmF F F F F-------<             for (int sy=-1; sy<=1; sy++) {
   97.    MmF F F F F                       if (giy+sy>-1 && giy+sy<gny) {
   98.  + MmF F F F F F-----<                 for (int sx=-1; sx<=1; sx++) {
   99.    MmF F F F F F                         if (gix+sx>-1 && gix+sx<gnx) {
  100.    MmF F F F F F                           global_int_t curcol = currentGlobalRow+sz*gnx*gny+sy*gnx+sx;
  101.    MmF F F F F F                           if (curcol==currentGlobalRow) {
  102.    MmF F F F F F                             assert(A.matrixDiagonal[currentLocalRow] == currentValuePointer);
  103.    MmF F F F F F                             assert(*currentValuePointer++ == 26.0);
  104.    MmF F F F F F                           } else {
  105.    MmF F F F F F                             assert(*currentValuePointer++ == -1.0);
  106.    MmF F F F F F                           }
  107.    MmF F F F F F                           assert(*currentIndexPointerG++ == curcol);
  108.    MmF F F F F F                           numberOfNonzerosInRow++;
  109.    MmF F F F F F                         } // end x bounds test
  110.    MmF F F F F F----->                 } // end sx loop
  111.    MmF F F F F                       } // end y bounds test
  112.    MmF F F F F------->             } // end sy loop
  113.    MmF F F F                     } // end z bounds test
  114.    MmF F F F--------->         } // end sz loop
  115.    MmF F F                     assert(A.nonzerosInRow[currentLocalRow] == numberOfNonzerosInRow);
  116.    MmF F F             #ifndef HPCG_NO_OPENMP
  117.    MmF F F                     #pragma omp critical
  118.    MmF F F             #endif
  119.    MmF F F                     localNumberOfNonzeros += numberOfNonzerosInRow; // Protect this with an atomic
  120.    MmF F F                     if (b!=0)      assert(bv[currentLocalRow] == 26.0 - ((double) (numberOfNonzerosInRow-1)));
  121.    MmF F F                     if (x!=0)      assert(xv[currentLocalRow] == 0.0);
  122.    MmF F F                     if (xexact!=0) assert(xexactv[currentLocalRow] == 1.0);
  123.    MmF F F----------->       } // end ix loop
  124.    MmF F------------->     } // end iy loop
  125.    MmF--------------->   } // end iz loop
  126.                        #ifdef HPCG_DETAILED_DEBUG
  127.                          HPCG_fout     << "Process " << A.geom->rank << " of " << A.geom->size <<" has " << localNumberOfRows    << " rows."     << endl
  128.                              << "Process " << A.geom->rank << " of " << A.geom->size <<" has " << localNumberOfNonzeros<< " nonzeros." <<endl;
  129.                        #endif
  130.                        
  131.                          global_int_t totalNumberOfNonzeros = 0;
  132.                        #ifndef HPCG_NO_MPI
  133.                          // Use MPI's reduce function to sum all nonzeros
  134.                        #ifdef HPCG_NO_LONG_LONG
  135.                          MPI_Allreduce(&localNumberOfNonzeros, &totalNumberOfNonzeros, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
  136.                        #else
  137.                          long long lnnz = localNumberOfNonzeros, gnnz = 0; // convert to 64 bit for MPI call
  138.  +                       MPI_Allreduce(&lnnz, &gnnz, 1, MPI_LONG_LONG_INT, MPI_SUM, MPI_COMM_WORLD);
  139.                          totalNumberOfNonzeros = gnnz; // Copy back
  140.                        #endif
  141.                        #else
  142.                          totalNumberOfNonzeros = localNumberOfNonzeros;
  143.                        #endif
  144.                        
  145.                          assert(A.totalNumberOfRows == totalNumberOfRows);
  146.                          assert(A.totalNumberOfNonzeros == totalNumberOfNonzeros);
  147.                          assert(A.localNumberOfRows == localNumberOfRows);
  148.                          assert(A.localNumberOfNonzeros == localNumberOfNonzeros);
  149.                        
  150.                          return;
  151.                        }

CC-6262 CC: VECTOR CheckProblem, File = CheckProblem.cpp, Line = 79 
  A loop was not vectorized because it contains a call to a function on line 87.

CC-6823 CC: THREAD CheckProblem, File = CheckProblem.cpp, Line = 79 
  A region starting at line 79 and ending at line 125 was multi-threaded.

CC-6817 CC: THREAD CheckProblem, File = CheckProblem.cpp, Line = 79 
  A loop was partitioned.

CC-3182 CC: IPA CheckProblem, File = CheckProblem.cpp, Line = 79, Column = 3 
  Loop has been flattened.

CC-6262 CC: VECTOR CheckProblem, File = CheckProblem.cpp, Line = 81 
  A loop was not vectorized because it contains a call to a function on line 87.

CC-3182 CC: IPA CheckProblem, File = CheckProblem.cpp, Line = 81, Column = 5 
  Loop has been flattened.

CC-6262 CC: VECTOR CheckProblem, File = CheckProblem.cpp, Line = 83 
  A loop was not vectorized because it contains a call to a function on line 87.

CC-3182 CC: IPA CheckProblem, File = CheckProblem.cpp, Line = 83, Column = 7 
  Loop has been flattened.

CC-3001 CC: IPA CheckProblem, File = CheckProblem.cpp, Line = 87, Column = 9 
  Tiny leaf routine "operator[]"(/cray/css/users/smehta/hpcg-orig/src/CheckProblem.cpp:930) was textually inlined.

CC-6262 CC: VECTOR CheckProblem, File = CheckProblem.cpp, Line = 94 
  A loop was not vectorized because it contains a call to a function on line 102.

CC-3182 CC: IPA CheckProblem, File = CheckProblem.cpp, Line = 94, Column = 9 
  Loop has been flattened.

CC-6262 CC: VECTOR CheckProblem, File = CheckProblem.cpp, Line = 96 
  A loop was not vectorized because it contains a call to a function on line 102.

CC-3182 CC: IPA CheckProblem, File = CheckProblem.cpp, Line = 96, Column = 13 
  Loop has been flattened.

CC-6262 CC: VECTOR CheckProblem, File = CheckProblem.cpp, Line = 98 
  A loop was not vectorized because it contains a call to a function on line 102.

CC-3182 CC: IPA CheckProblem, File = CheckProblem.cpp, Line = 98, Column = 17 
  Loop has been flattened.

CC-3021 CC: IPA CheckProblem, File = CheckProblem.cpp, Line = 138, Column = 3 
  "MPI_Allreduce" was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
